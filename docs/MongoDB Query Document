This document describes the implementation of 5 advanced MongoDB aggregation pipelines for an e-commerce application, including query purpose, pipeline design, and expected results.

The analytics module uses MongoDB aggregation framework with $lookup, $group, $sort, $unwind, and other stages to produce actionable insights.

 Top-Selling Products (Last 30 Days)
Endpoint:
GET /analytics/top-products

Purpose:
Identify the top 5 best-selling products in the last 30 days.

Pipeline Steps:

$match: Filter orders from the last 30 days.

$unwind: Flatten the items array.

$group: Group by product_id and sum the quantity sold.

$sort: Sort products by total quantity sold in descending order.

$limit: Limit the result to top 5 products.

$lookup: Join with the products collection to get product details.

$unwind: Unwind the joined product array.

$project: Format the output to show product name and total sold.

Expected Result:
List of top 5 products with their names and total units sold.

Most Active Buyers (Last 30 Days)
Endpoint:
GET /analytics/most-active-buyers

Purpose:
Find the 5 users who placed the most orders in the past 30 days.

Pipeline Steps:

$match: Filter orders from the last 30 days.

$group: Group by user_id and count the number of orders.

$sort: Sort users by total orders in descending order.

$limit: Top 5 buyers.

$lookup: Join with users collection to get buyer details.

$unwind: Unwind the joined user array.

$project: Display buyer name and total order count.

Expected Result:
Top 5 users with their names and total orders placed.


Revenue by Seller
Endpoint:
GET /analytics/revenue-by-seller

Purpose:
Calculate total revenue generated by each seller across all orders.

Pipeline Steps:

$unwind: Flatten the items array.

$lookup: Join with products collection to get price and seller info.

$unwind: Unwind the product array.

$group: Group by seller_id and compute total revenue (quantity * price).

$lookup: Join with users collection to get seller details.

$unwind: Unwind the seller array.

$project: Format output to show seller name and total revenue.

$sort: Sort sellers by revenue in descending order.

Expected Result:
List of sellers ranked by total revenue.

Most Carted Products
Endpoint:
GET /analytics/most-carted-products

Purpose:
Identify the top 5 products that users have added to their carts the most.

Pipeline Steps:

$unwind: Flatten the items array in the cart documents.

$group: Group by product_id and count additions.

$sort: Sort by cart addition count in descending order.

$limit: Top 5 products.

$lookup: Join with products collection to get product details.

$unwind: Unwind the product array.

$project: Display product name and cart count.

Expected Result:
Top 5 products with their names and the number of times they were added to carts.

Orders in the Last 7 Days (Daily Breakdown)
Endpoint:
GET /analytics/orders-last-7-days

Purpose:
Visualize order activity over the last 7 days, grouped by day.

Pipeline Steps:

$match: Filter orders between 7 days ago and today.

$group: Group orders by date (formatted as YYYY-MM-DD).

$sort: Sort results by date in ascending order.

Expected Result:
A day-by-day breakdown of total orders for the past week.

Summary:
Results are shown in analytics board on the frontpage. 
Each aggregation pipeline combines multiple stages including $lookup, $group, $sort, $unwind, and others for efficient analytics. Indexes were applied to transaction_date, user_id, and product_id fields to optimize query performance.

The endpoints are ready for integration with dashboards, reporting tools, or API consumers.

